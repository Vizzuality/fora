import React from 'react';
import Script from 'next/script';
import { getDomain, getApiEndpoint, getScriptPath, getRemoteScriptName, } from './common';
export default function PlausibleProvider(props) {
    const { enabled = process.env.NODE_ENV === 'production' &&
        (!process.env.NEXT_PUBLIC_VERCEL_ENV ||
            process.env.NEXT_PUBLIC_VERCEL_ENV === 'production'), } = props;
    const proxyOptions = process.env.next_plausible_proxy
        ? {
            trailingSlash: process.env.next_plausible_trailingSlash === 'true',
            basePath: process.env.next_plausible_basePath,
            customDomain: process.env.next_plausible_customDomain,
            scriptName: process.env.next_plausible_scriptName,
            subdirectory: process.env.next_plausible_subdirectory,
        }
        : undefined;
    return (React.createElement(React.Fragment, null,
        enabled && (React.createElement(Script, Object.assign({ async: true, defer: true, "data-api": proxyOptions ? getApiEndpoint(proxyOptions) : undefined, "data-domain": props.domain, "data-exclude": props.exclude, src: (proxyOptions ? '' : getDomain(props)) +
                getScriptPath(Object.assign(Object.assign({}, proxyOptions), { scriptName: proxyOptions
                        ? proxyOptions.scriptName
                        : getRemoteScriptName(props.selfHosted) }), props.trackLocalhost ? 'local' : null, props.manualPageviews ? 'manual' : null, props.pageviewProps ? 'pageview-props' : null, props.trackOutboundLinks ? 'outbound-links' : null, props.exclude ? 'exclusions' : null, props.revenue ? 'revenue' : null, props.trackFileDownloads ? 'file-downloads' : null, props.taggedEvents ? 'tagged-events' : null), integrity: props.integrity, crossOrigin: props.integrity ? 'anonymous' : undefined }, (typeof props.pageviewProps === 'object'
            ? Object.fromEntries(Object.entries(props.pageviewProps).map(([k, v]) => [
                `event-${k}`,
                v,
            ]))
            : undefined), props.scriptProps))),
        enabled && (React.createElement(Script, { id: "next-plausible-init", dangerouslySetInnerHTML: {
                __html: `window.plausible = window.plausible || function() { (window.plausible.q = window.plausible.q || []).push(arguments) }`,
            } })),
        props.children));
}
//# sourceMappingURL=PlausibleProvider.js.map