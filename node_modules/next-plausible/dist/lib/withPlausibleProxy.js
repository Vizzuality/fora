var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import getCombinations from './combinations';
import { allModifiers, getApiEndpoint, getDomain, getRemoteScriptName, getScriptPath, plausibleDomain, } from './common';
export default function withPlausibleProxy(options = {}) {
    return (nextConfig) => {
        const nextPlausiblePublicProxyOptions = Object.assign(Object.assign({}, options), { trailingSlash: !!nextConfig.trailingSlash, basePath: nextConfig.basePath });
        const nextPlausibleEnv = {
            next_plausible_proxy: 'true',
            next_plausible_trailingSlash: nextPlausiblePublicProxyOptions.trailingSlash ? 'true' : undefined,
            next_plausible_basePath: nextPlausiblePublicProxyOptions.basePath,
            next_plausible_customDomain: nextPlausiblePublicProxyOptions.customDomain,
            next_plausible_scriptName: nextPlausiblePublicProxyOptions.scriptName,
            next_plausible_subdirectory: nextPlausiblePublicProxyOptions.subdirectory,
        };
        return Object.assign(Object.assign({}, nextConfig), { env: Object.assign(Object.assign({}, nextConfig.env), nextPlausibleEnv), rewrites: () => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const domain = getDomain(options);
                const getRemoteScript = (...modifiers) => domain +
                    getScriptPath({
                        scriptName: getRemoteScriptName(domain !== plausibleDomain),
                    }, ...modifiers);
                const plausibleRewrites = [
                    {
                        source: getScriptPath(options),
                        destination: getRemoteScript(),
                    },
                    ...getCombinations(allModifiers).map((modifiers) => ({
                        source: getScriptPath(options, ...modifiers),
                        destination: getRemoteScript(...modifiers),
                    })),
                    {
                        source: getApiEndpoint(Object.assign(Object.assign({}, nextPlausiblePublicProxyOptions), { basePath: '' })),
                        destination: `${domain}/api/event`,
                    },
                ];
                if (process.env.NEXT_PLAUSIBLE_DEBUG) {
                    console.log('plausibleRewrites = ', plausibleRewrites);
                }
                const rewrites = yield ((_a = nextConfig.rewrites) === null || _a === void 0 ? void 0 : _a.call(nextConfig));
                if (!rewrites) {
                    return plausibleRewrites;
                }
                else if (Array.isArray(rewrites)) {
                    return rewrites.concat(plausibleRewrites);
                }
                else if (rewrites.afterFiles) {
                    rewrites.afterFiles = rewrites.afterFiles.concat(plausibleRewrites);
                    return rewrites;
                }
                else {
                    rewrites.afterFiles = plausibleRewrites;
                    return rewrites;
                }
            }) });
    };
}
//# sourceMappingURL=withPlausibleProxy.js.map