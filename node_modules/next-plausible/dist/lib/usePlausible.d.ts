type Props = Record<string, unknown> | never;
type EventOptions<P extends Props> = {
    props: P;
    revenue?: {
        currency: string;
        amount: number;
    };
    u?: string;
    callback?: VoidFunction;
};
type EventOptionsTuple<P extends Props> = P extends never ? [Omit<EventOptions<P>, 'props'>?] : [EventOptions<P>];
type Events = {
    [K: string]: Props;
};
export default function usePlausible<E extends Events = any>(): <N extends keyof E>(eventName: N, ...rest: EventOptionsTuple<E[N]>) => any;
export {};
